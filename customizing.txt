Localwikiの外観カスタマイズ
===========================

Localwikiはサイトの外観や挙動の一部を変更することが可能です。その際、ソースコードまで掘り下げて変更する必要はありません。

変更は、サイトのCSSや、外観のテンプレート、あるいは全く新規にテーマを作成することで行います。

テンプレートやCSSの修正という手順は、ソースコードを改変するよりも多少技術的な敷居が低いと考えています。

ただし、操作するにはサーバ上での設定ファイル修正方法や、HTML・CSSについての若干の知識が必要です。


.. note:: もしあなたが開発者で、既に上記の知識に慣れ親しんでいる場合、``localsettings.py`` の ``DEBUG`` 項目を ``False`` に変更してください。
   Trueのままで運用を行った場合、``localwiki-manage runserver`` を実行した際に静的なメディアファイルを読み込むことができません。


テンプレートファイル
--------------------

Localwikiには *テンプレート* という概念があります。テンプレートとは、Localwikiが稼働しているサーバ上に配置されたテキストファイルで、サイト内のページを生成するために利用されます。


.. note:: これらの *テンプレートファイル* は、Wiki上の "テンプレートページ" とは異なります。Wiki上のテンプレートページは、ページの新規作成の手間を削減するために用意されています。サーバ上に配置されている *テンプレートファイル* とは、Localwikiソフトウェアがサイト自体を生成するために利用するファイルです。

   これらのテンプレートファイルは `Django テンプレート <https://docs.djangoproject.com/en/dev/topics/templates/>`_ を基礎としており、特に改変を加えていません。Djangoテンプレート言語は、すべてサポートされています。

   テンプレートについての詳細は `Django テンプレートドキュメント <https://docs.djangoproject.com/en/dev/topics/templates/>`_ を参照してください。

   ただし、細かい修正であればテンプレートドキュメントを読み込むまでもなく変更することができます。

グローバルのテンプレートディレクトリは ``/usr/share/localwiki/templates`` 、あるいは ``env/share/localwiki/templates``  (手動インストール時)です。

テーマ
------

*テーマ* はテンプレートファイルと静的なアセットファイルを一揃えのセットにしたもので、サイト全体の外観を左右します。

それぞれのテーマはディレクトリに分けられ、以下のファイルが配置されます:

* テンプレート用ディレクトリ ( ``templates/`` )
* 静的なアセット設定ディレクトリ ( ``assets/`` ) 例えば、CSSファイルや画像ファイル等

グローバルのテーマディレクトリは ``/usr/share/localwiki/themes`` 、あるいは ``env/share/localwiki/themes`` (手動インストール時)です。 *注意* :もしlocalwiki-0.2-beta-12を利用している場合は、上記のディレクトリを手動で作成する必要があります。


チュートリアル
--------------

テーマの仕組みを解説するために、いくつか例をあげて説明します。

.. _example1:

例 1: ロゴ画像の追加
~~~~~~~~~~~~~~~~~~~~~~~~
それでは、自身のサイトにロゴ画像を追加してみましょう。

最初から全く新規のテーマを作成するのは手に余りますので、まずはちょっとした変更から始めてみましょう。

まずは、既に適用されているテンプレートファイルの位置を特定します。

シェルに以下を入力してください。 ::

    localwiki-manage shell

localwiki操作用のシェルが起動したら、以下をコピーして貼り付けます。 ::

    import sapling; print sapling.__path__[0]; exit()

コマンドの結果として、あなたのサーバのlocalwikiのインストール先ディレクトリが出力されます。


.. note:: コードが配置されているディレクトリにあるファイルを直接編集するのは推奨されません。アップグレードの際に、それらのファイルが上書きされてしまう可能性があるためです。コードを直接編集する必要が有る場合は、:ref:`development install <dev-install>` の手順に従うようにしてください。

先ほどのコマンドの結果で出力されたlocalwikiのインストール先ディレクトリをコピーして、 ``cd`` で移動してください。 ``theme`` ディレクトリが配置されているはずです。 さらに、 ``theme`` ディレクトリの配下には、既に適用されているテーマ ``sapling`` が配置されています。

先に説明した通り、 ``sapling`` テーマディレクトリの配下には ``assets`` と ``templates`` ディレクトリが配置されています。 ::

    $ ls sapling
    assets  LICENSE.txt  README  templates

``template`` ディレクトリの中には、テンプレートファイルが配置されている ``site`` ディレクトリが存在します。 ::

    $ cd templates
    $ ls
    site
    $ cd site
    $ ls
    base.html  login_info.html  nav.html  search_form.html  site_title.html

テンプレートファイルの中にある ``site_title.html`` が、今回のロゴ追加作業で変更対象となるファイルです。テンプレートファイルを、自身のサイトのグローバルテンプレートディレクトリにコピーして、編集を行いましょう。

まずは、``site`` ディレクトリをまるごと、グローバルテンプレートディレクトリ(前述)へコピーします。

グローバルテンプレートディレクトリは ``/usr/share/localwiki/templates`` か、あるいは ``env/share/localwiki/templates``  (手動インストールの場合)です。 ::

    mkdir /usr/share/localwiki/templates/site

ファイルをコピーしましょう。 ::

    cp site_title.html /usr/share/localwiki/templates/site

コピーが終わったら、 ``/usr/share/localwiki/templates/site/site_title.html`` を開いて編集します。

以下の内容が記載されているはずです。 ::

    {% block site_title %}
    {% if current_site %}
      <h1><a href="{% url pages:frontpage %}">{{ current_site.name }}</a></h1>
    {% endif %}
    {% endblock %}

以下のように編集します。 ::

    {% block site_title %}
    {% if current_site %}
      <a href="{% url pages:frontpage %}"><img src="{{ STATIC_URL }}/img/logo.png?v=1" alt="{{ current_site.name }}"/></a>
    {% endif %}
    {% endblock %}

ロゴ用の画像を編集して、ファイル名を ``logo.png`` に変更します。

画像ファイルは静的ファイル用ディレクトリに配置します。

``/usr/share/localwiki/static`` 、あるいは ``env/share/localwiki/static`` (手動インストールの場合)です。

ここまでの手順が完了したら、ウェブサーバを再起動します。 以下のコマンドを入力してください。 ::

    sudo /etc/init.d/apache2 restart

新しいロゴが表示されましたか？


例 2: ページ毎に独自のCSSファイルを適用する
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

https://dentonwiki.org のFrontPageには、 "I want to create a page about _______" という文字が入ったバナーが表示されています。

.. figure :: /_static/images/css_table_dentonwiki.jpg

DentonWiki ではこの機能を、表を1つ作成し、カスタマイズしたCSSクラスをそれに与えることで実現しています。 https://dentonwiki.org で "ページのソースを表示" を実行すると、以下のHTMLソースが表示されます。 ::


    <table class="welcome">
      <tbody>
        <tr>
          <td style="text-align: right;">
            <h1>
            Welcome to <a href="DentonWiki">Denton Wiki</a>!</h1>
            <h3>
            A website about Denton that <em>anyone</em> can edit</h3>
            <br />
            <br />
            <br />
            <br />
            <br />
            <br />
            <br />
            <h1>
            	I want to make a page about <input class="plugin searchbox" type="text" value="" /></h1>
          </td>
        </tr>
      </tbody>
    </table>

独自のCSSクラスを表に対して追加するには、編集中に右クリックを押し、 Table properties -> Advanced settings -> CSS classes から行うことができます。

しかし、カスタマイズしたCSSを適用させるには、新規にCSSファイルを作成し、ページのHTMLからCSSファイルを参照させる必要があります。以下に方法を示します。 :

1. グローバルスタティックディレクトリに ``denton.css`` という名称のファイルを作成します。今回の状況では ``/usr/share/localwiki/static/css/denton.css`` (あるいは手動インストールの場合 ``env/share/localwiki/static/css`` )です。

2. ``denton.css`` に対して、以下の記述を行います。クラス ``welcome`` を使って、表の見た目を変更しています。 ::

    #page .welcome td {
        display: block;
        max-width: 1360px;
        height: 280px;
        background-image: url(/front_page/_files/welcome.jpg);
        background-position: 66% 0%;
        background-repeat: no-repeat;
        padding: 2em;
        border: 3px solid #b5b5b5;
    }
    #page .welcome {
        width: 100%;
        border: none;
    }
    #page .welcome a {
        text-decoration: none;
    }
    #page .welcome a:hover {
        text-decoration: underline;
    }
    #page .welcome h1, #page .welcome h2, #page .welcome h3, #page .welcome h4 {
        background-image: url(/static/img/80_trans_white_bg.png);
        background-repeat: repeat;
        width: auto;
        float: right;
        padding: 0 0.25em 0 0.25em;
    }
    #page .welcome h1 {
        padding: 0.1em 0.25em 0.1em 0.25em;
    }
    #page .welcome h3 {
        padding: 0.2em 0.3em 0.25em 0.3em;
        margin-top: -1em;
    }
    #page .welcome .searchbox * {
        vertical-align: middle;
    }
    #page .welcome .searchbox input {
        margin-top: 0.4em;
    }

3. CSSファイルは2つの画像ファイルを参照しています。

``/static/img/80_trans_white_bg.png`` と ``/front_page/_files/welcome.jpg`` です。

``welcome.jpg`` 画像の追加は、単純に ``welcome.jpg`` という名称のファイルをFront Pageへ追加することで行います。また、 ``/usr/share/localwiki/static/img`` (あるいは手動インストールの場合 ``env/share/locawiki/static/img`` )へ、 `80_trans_white_bg.png <https://dentonwiki.org/static/img/80_trans_white_bg.png>`_ をコピーします。

4. こうして作成した ``denton.css`` を、全てのページのHTMLファイルから参照させます。 :ref: `例 1 <example1>` で行った操作を参考にして localwikiのコードディレクトリへ移動し、 ``sites/base.html`` をグローバルテンプレートディレクトリへコピーします。 ::

    $ cd /path/to/localwiki/code/directory
    $ cd themes/sapling/templates/site
    $ ls
    base.html  login_info.html  nav.html  search_form.html  site_title.html
    $ cp base.html /usr/share/localwiki/templates/site/

次に、新しくコピーした ``/usr/share/localwiki/templates/site/base.html`` ファイルを開きましょう。ファイルの一部を以下のように編集します。 ::

  {% block media %}
  <link rel="stylesheet" href="{% static "theme/css/reset.css" %}">
  <link rel="stylesheet" href="{% static "theme/css/site.css" %}">
  {% endblock %}

以下のように書き換えます。 ::

  {% block media %}
  <link rel="stylesheet" href="{% static "theme/css/reset.css" %}">
  <link rel="stylesheet" href="{% static "theme/css/site.css" %}">
  <link rel="stylesheet" href="{{ STATIC_URL }}css/denton.css?v=1">
  {% endblock %}

編集が完了したら、ウェブサーバを再起動します。 ::

    sudo /etc/init.d/apache2 restart

自身の全てのページから、``denton.css`` ファイルが参照されるようになります！

テーマをの新規作成
------------------

カスタマイズに慣れてきたら、完全に新しいテーマを自作することも可能です。以下に方法を示します。:

1. localwikiのコードディレクトリへ移動し、 :ref: `例 1 <example1>` で行った操作を参考にして Localwikiのコードディレクトリへ移動して、 ``sapling`` テーマを、自身のグローバルテンプレートディレクトリの ``theme`` へコピーします。 ::

    $ cd /path/to/localwiki/code/directory
    $ cd themes/
    $ cp -r sapling /usr/share/localwiki/themes/nameofyourtheme

.. note:: localwiki-0.12-beta-12 では、``themes`` ディレクトリが share/localwiki になります。もしディレクトリが存在しない場合は新しく作成してください。

次に、``/usr/share/localwiki/conf/localsettings.py`` ファイルを編集し、``SITE_THEME`` の値を ``sapling`` から ``nameofyourtheme`` (自分の好きな名称) に変更します。

完了したら、以下のコマンドを実行します。 :

    localwiki-manage collectstatic

ウェブサーバの再起動を行います。 ::

    /etc/init.d/apache2 restart

上記の手順で、あなたが自作した新規テーマを利用することが可能です。

テーマの開発を行う際、 ``template/`` 配下のファイルを変更した場合はウェブサーバの再起動が必要です。また、 ``assets/`` 配下のファイルを変更した場合は ``localwiki-manage collectstatic`` を実行する必要があります。


テンプレート内から静的なアセットを参照
--------------------------------------

テーマテンプレートの中で、静的なアセットを参照することが可能です。 ::

    <img src="{{STATIC_URL}}theme/img/mybutton.png"/>

この例では、themes/yourtheme/img/mybutton.png に配置されているファイルを呼び出しています。


既に配置されているテンプレートの上書き
--------------------------------------

詳細は近日追記予定です。

自分で方法を編み出せる方のために記載しておくと、例えば ``pages/base.html`` を上書きするには ``themes/nameofyourtheme/templates/pages/base.html`` ファイルを作成して定義する必要があります。


